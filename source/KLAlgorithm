import glob, os, io
import  networkx as nx
from networkx.algorithms import community


def executeKLAlgorithm(directory):

    os.chdir(directory)
    for file in glob.glob("*.net"):

        multigraph = nx.read_pajek(file)
        modelGraph = nx.Graph(multigraph)
        filename = os.path.join("/Users/Mariano/Documents/Maestria Matematica y Computacion/Redes Complejas/PEC 3/complex-networks-pec3/results/",file.split(".")[0]+ ".clu")
        f = open(filename, "w+")
        communities = community.kernighan_lin_bisection(modelGraph)

        lines = [None] * (len(modelGraph)+1)
        group_number = 1

        for group in communities:
            group_as_string = str(group_number)
            for node_value in group:
                id = modelGraph.nodes.get(node_value)['id']
                index = int(id)
                lines[index] = group_as_string
            group_number+=1
        lines[0] = "*Vertices " + str(len(modelGraph))
        f.writelines('\n'.join(lines))
        f.close()
        print(communities)


def main():

    #realFiles = os.listdir("../files/real/")
    #toyFiles = os.listdir("../files/toy/")
    executeKLAlgorithm("../files/model/")

main()

